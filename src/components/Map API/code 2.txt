MapComponent
import React, { useEffect, useState } from "react";
import RailwayMap from "./RailwayMap.jsx";
import { loadRailwayData } from "./DataLoader.jsx";

function MapComponent() {
  const [data, setData] = useState({ stations: [], trains: [] });

  useEffect(() => {
    async function fetchData() {
      const loadedData = await loadRailwayData();
      if (loadedData) {
        setData(loadedData);
      }
    }
    fetchData();
  }, []);

  return (
    <div className="map" style={{ margin: '100px 0 0 200px', width: '1200px', height: '600px' }}>
      <link
        rel="stylesheet"
        href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
      />

      <RailwayMap
        stations={data.stations}
        trains={data.trains}
      />
    </div>
  );
}
-----------------------------------------------------------------------------------------------------------------------------
DataLoader
export async function loadRailwayData() {
  try {
    // Assuming the GeoJSON file is in the same directory as DataLoader.jsx
    const response = await fetch('src\\components\\Map API\\Data.geojson');
    
    if (!response.ok) {
      throw new Error('Failed to load railway data.');
    }

    const data = await response.json(); // This will work for GeoJSON
    
    // Extract relevant features from the loaded data
    const stationsData = data.features.filter((feature) => feature.type === 'Feature');
    
    return { stations: stationsData, /* other data as needed */ };
  } catch (error) {
    console.error('Error loading railway data:', error);
    throw error;
  }
}

export default MapComponent;
-----------------------------------------------------------------------------------------------------------------------------

RailwayMap
import React from 'react';
import { MapContainer, TileLayer, Circle, Popup, Polyline, ScaleControl } from 'react-leaflet';
import 'leaflet.markercluster/dist/MarkerCluster.css';
import 'leaflet.markercluster/dist/MarkerCluster.Default.css';
import MarkerClusterGroup from 'react-leaflet-markercluster';

function RailwayMap({ stations, trains }) {
  let trainLayers = [];

  if (trains && trains.length > 0) {
    if (trains.length > 1000) {
      const trainMarkers = trains.map((train) => (
        <Polyline
          key={train.properties.number}
          positions={train.geometry.coordinates.map((coord) => [
            coord[1],
            coord[0],
          ])}
          color="blue"
        />
      ));
      trainLayers = <MarkerClusterGroup>{trainMarkers}</MarkerClusterGroup>;
    } else {
      trainLayers = trains.map((train) => (
        <Polyline
          key={train.properties.number}
          positions={train.geometry.coordinates.map((coord) => [
            coord[1],
            coord[0],
          ])}
          color="blue"
        />
      ));
    }
  }

  return (
    <MapContainer
      center={[20.5937, 78.9629]}
      zoom={5}
      style={{ height: '500px', width: '100%' }}
    >
      <TileLayer
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      />
      {stations.map((station) => (
        <Circle
          key={station.properties.code}
          center={[
            station.geometry?.coordinates[1] || 0,
            station.geometry?.coordinates[0] || 0,
          ]}
          radius={50}
          color='red'
        >
          <Popup>{station.properties.name}</Popup>
        </Circle>
      ))}
      {trainLayers}
      <ScaleControl position="bottomleft" />
    </MapContainer>
  );
}

export default RailwayMap;
